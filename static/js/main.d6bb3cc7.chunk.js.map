{"version":3,"sources":["components/images/logo.svg","components/Logo.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","src","logo","alt","href","MainPage","name","value","selected","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,wJCoB5BC,EAhBF,WACZ,OACC,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,IAAMC,IAAI,OAAOH,UAAU,cACrC,4CAEF,yBAAKA,UAAU,gBACd,uBAAGI,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,iBC2BUC,EAvCE,WAChB,OACC,6BACE,yBAAKL,UAAU,cACb,yBAAKA,UAAU,WAAf,WACA,yBAAKA,UAAU,SAAf,SAEF,yBAAKA,UAAU,eACb,4BAAQA,UAAU,WAAlB,WACA,4CAEF,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,MACd,4CACA,4BAAQM,KAAK,SAASN,UAAU,UAC/B,4BAAQO,MAAM,WAAWC,UAAQ,GAAjC,aACA,4BAAQD,MAAM,aAAd,cACF,4BAAQA,MAAM,YAAd,eAGA,4BAAQP,UAAU,OAAlB,aAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,+BACE,wBAAIA,UAAU,WACZ,wCACA,2CACA,oCACA,qCACA,4CCfGS,MATf,WACE,OACC,oCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAiBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6bb3cc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.628f0336.svg\";","import React from 'react';\r\n\r\nimport logo from './images/logo.svg'\r\n\r\nconst Logo = () => {\r\n\treturn(\r\n\t\t<div className=\"logo__container\">\r\n\t\t  <div className=\"logo\">\r\n\t\t    <img src={logo} alt=\"logo\" className=\"img__logo\" />\r\n\t\t    <p>MoneyTracker</p>\r\n\t\t  </div>\r\n\t\t  <div className=\"buttons_logo\">\r\n\t\t\t  <a href=\"#\">Home</a>\r\n\t\t\t  <a href=\"#\">Charts</a>\r\n\t\t\t  <a href=\"#\">Categories</a>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\n\r\nconst MainPage = () => {\r\n\treturn(\r\n\t\t<div>\r\n\t\t  <div className=\"allBalance\">\r\n\t\t    <div className=\"balance\">Balance</div> \r\n\t\t    <div className=\"money\">$300</div>\r\n\t\t  </div>\r\n\t\t  <div className=\"mainButtons\">\r\n\t\t    <button className=\"charges\">Charges</button>\r\n\t\t    <button>Incomes</button>\r\n\t\t  </div>\r\n\t\t  <div className=\"changeAndAdd\">\r\n\t\t    <div className=\"ww\">\r\n\t\t    \t<span>My charges</span>\r\n\t\t\t    <select name=\"change\" className=\"change\">\r\n\t\t\t  \t  <option value=\"thisWeek\" selected>This week</option>\r\n\t\t\t  \t  <option value=\"thisMonth\">This month</option>\r\n\t\t\t\t  <option value=\"thisYear\">This year</option>\r\n\t\t\t  \t</select>\r\n\t\t  \t</div>\r\n\t\t    <button className=\"add\">Add more</button>\r\n\t\t  </div>\r\n\t\t  <div className=\"mainTable\">\r\n\t\t    <div className=\"tbl\">\r\n\t\t      <table>\r\n\t\t        <tr className=\"mainTbl\">\r\n\t\t          <th>Category</th>\r\n\t\t          <th>Description</th>\r\n\t\t          <th>Data</th>\r\n\t\t          <th>Money</th>\r\n\t\t          <th>Action</th>\r\n\t\t        </tr>\r\n\t\t      </table>\r\n\t\t    </div>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MainPage;","import React from 'react';\n\nimport Logo from './components/Logo.js';\nimport MainPage from './components/MainPage.js';\n\nimport logo from './components/images/logo.svg';\n\n\nfunction App() {\n  return (\n  \t<>\n\t  <Logo />\n\t  <MainPage />\n\t</>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}